{
	// Place your benzed-ts workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"New Type Schema": {
		"scope": "javascript,typescript",
		"prefix": "new-type-schema-file",
		"description": "Log output to console",
		"body": [
			"import IsType from './is-type'",
			"",
			"//// Types ////",
			"",
			"export type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Input = ${1:unknown}",
			"",
			"//// Exports ////",
			"",
			"class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}<T extends ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}Input> extends IsType<${1:unknown}> {",
			"",
			"    constructor(input: T) {",
			"        super({",
			"            type: '${1:unknown}',",
			"            is: (i: unknown): i is ${1:unknown} => ${2:false}",
			"        })",
			"    }",
			"",
			"}",
			"",
			"//// Exports ////",
			"",
			"export default ${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}",
			"",
			"export {",
			"    ${TM_FILENAME_BASE/(.+)/${1:/pascalcase}/}",
			"}"
		],
	}
}